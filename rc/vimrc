"lang ja_jp
inoremap <silent> jj <ESC>
set langmenu=ja_JP.utf-8
set ff=unix
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set number
set showmode
set showmatch
set hlsearch
nnoremap <ESC><ESC> :nohlsearch<CR>
set ignorecase          " 文字小文字を判別しない
set incsearch           " インクリメンタルサーチ
set smartcase           " でも大文字小文字が混ざって入力されたら区別する
set nowrap              " 折り返さない
set nowrapscan          " ファイルの末尾で折り返さない
set wrapscan
"set whichwrap=b,s,<,>,[,] "左右のカーソル移動で行間移動可能にする。
"set smartindent
set scrolloff=3
set laststatus=2
" タブ文字の表示 ^I で表示されるよ
set list
"set listchars=tab:^\    " タブを ^\   にする
set listchars=tab:^\ ,trail:_,eol:↲,extends:>,precedes:<,nbsp:%
set backup
set backupdir=$HOME/.vimdir/backup
set directory=$HOME/.vimdir/swap
set grepprg=ack
syntax enable

"ターミナルで256色表示を使う
set t_Co=256
"内容が変更されたら自動的に再読み込み
set autoread
"C-vの矩形選択で行末より後ろもカーソルを置ける
set virtualedit=block
"カーソルラインを表示する
set cursorline
"開いているバッファのディレクトリに移動
if v:version >= 700
	set autochdir
endif
"ファイルナンバー表示
set statusline=[%n]
"ホスト名表示
set statusline+=%{matchstr(hostname(),'\\w\\+')}@
"ファイル名表示
set statusline+=%<%F
"変更のチェック表示
set statusline+=%m
"読み込み専用かどうか表示
set statusline+=%r

"ファイルフォーマット表示
set statusline+=[%{&fileformat}]
"文字コード表示
set statusline+=[%{has('multi_byte')&&\&fileencoding!=''?&fileencoding:&encoding}]
"ファイルタイプ表示
set statusline+=%y
"ここからツールバー右側
set statusline+=%=
"skk.vimの状態
set statusline+=%{exists('*SkkGetModeStr')?SkkGetModeStr():''}
"文字バイト数/カラム番号
set statusline+=[%{col('.')-1}=ASCII=%B,HEX=%c]
"現在文字列/全体列表示
set statusline+=[C=%c/%{col('$')-1}]
"現在文字行/全体行表示
set statusline+=[L=%l/%L]
"現在行が全体行の何%目か表示
set statusline+=[%p%%]

" 全角スペースを視覚化
"highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
"au BufNewFile,BufRead * match ZenkakuSpace /　/

set wildmode=list:longest

" 濃い青見辛い
autocmd ColorScheme * highlight Directory ctermfg=69 guifg=#aaccff
autocmd ColorScheme * highlight Statement ctermfg=69 gui=bold guifg=#ffff60
autocmd ColorScheme * highlight Comment ctermfg=245 guifg=#80a0ff
let g:hybrid_use_Xresources = 1
colorscheme hybrid

"全角スペースをハイライト表示
function! ZenkakuSpace()
	"highlight ZenkakuSpace cterm=reverse ctermfg=DarkMagenta gui=reverse guifg=DarkMagenta
	highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666 guifg=#666666
endfunction
if has('syntax')
	augroup ZenkakuSpace
		autocmd!
		autocmd ColorScheme       * call ZenkakuSpace()
		autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
	augroup END
	call ZenkakuSpace()
endif

" auto paste
if &term =~ "xterm"
	let &t_ti .= "\e[?2004h"
	let &t_te .= "\e[?2004l"
	let &pastetoggle = "\e[201~"

	function XTermPasteBegin(ret)
		set paste
		return a:ret
	endfunction

	noremap <special> <expr> <Esc>[200~ XTermPasteBegin("0i")
	inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
	cnoremap <special> <Esc>[200~ <nop>
	cnoremap <special> <Esc>[201~ <nop>
endif

" NeoBundle 
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
	if &compatible
		set nocompatible               " Be iMproved
	endif

	" Required:
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'rking/ag.vim'
" ctags
NeoBundle 'szw/vim-tags'
" vim-tags :TagsGenerate
au BufNewFile,BufRead *.php let g:vim_tags_project_tags_command = "ctags" --languages=php -f ~/php.tags `pwd` 2>/dev/null &"
" tagsジャンプの時に複数ある時は一覧表示 ^] ^t 
nnoremap <C-]> g<C-]> 
" ^h ^k でwin分割ジャンプ
nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>

NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
NeoBundleLazy 'Shougo/vimfiler'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'vim-scripts/DirDiff.vim'
NeoBundle 'vim-scripts/PreserveNoEOL'
NeoBundle 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0 " http://qiita.com/kadoppe/items/ffaef1f5a69f2cfcf12e

"NeoBundle 'pangloss/vim-javascript'
"NeoBundle 'mxw/vim-jsx'
"NeoBundle 'hail2u/vim-css3-syntax'
"NeoBundle 'taichouchou2/html5.vim'
"NeoBundle 'taichouchou2/vim-javascript'
"NeoBundle 'kchmck/vim-coffee-script'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck



"----------------------------------------
" unite.vim
let g:unite_enable_start_insert = 1
let g:unite_enable_short_source_names = 1
let g:unite_split_rule = 'botright'
let g:neomru#file_mru_path=expand($HOME.'/.vim/.neomru_file')
let g:neomru#directory_mru_path=expand($HOME.'/.vim/.neomru_direcroty')

nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
"nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
"nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
"nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
" カレントディレクトリ移動
nnoremap <Space>gg :cd <C-r>=expand("%:p:h")<CR>
" バッファ一覧 -auto-resize
nnoremap <silent> <Space>b :<C-u>Unite buffer -horizontal -direction=botright<CR>
" 最近使用したファイル一覧
nnoremap <silent> <Space>m :<C-u>Unite file_mru -horizontal -direction=botright<CR>
" grep
nnoremap <silent> <Space>gr :<C-u>Unite grep:. -buffer-name=search-buffer -auto-preview<CR>
" grep検索結果の再呼出
nnoremap <silent> <Space>r :<C-u>UniteResume search-buffer<CR>
" fuzzy-finder
nnoremap <silent> <Space>p :<C-u>call DispatchUniteFileRecAsyncOrGit()<CR>
function! DispatchUniteFileRecAsyncOrGit()
	if isdirectory(getcwd()."/.git")
		Unite file_rec/git
	else
		Unite file_rec/async
	endif
endfunction

" Auto change local current directory to git-root
function! ChangeCurrentDirectoryToProjectRoot()
	let root = unite#util#path2project_directory(expand('%'))
	execute 'lcd' root
endfunction
autocmd BufEnter * :call ChangeCurrentDirectoryToProjectRoot()

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
	let g:unite_source_grep_command = 'ag'
	let g:unite_source_grep_default_opts = '-S --nogroup --nocolor --column'
	let g:unite_source_grep_recursive_opt = ''
	let g:unite_source_grep_max_candidates = 200
endif

" unite.vim上でのキーマッピング
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
	" 単語単位からパス単位で削除するように変更
	inoremap <silent><buffer> <C-w> <Plug>(unite_delete_backward_path)
	" ESCキーを押すと終了する
	imap <silent><buffer> <C-j> <Down>
	imap <silent><buffer> <C-k> <Up>
	nmap <silent><buffer> <C-[> <Plug>(unite_exit)
	nmap <silent><buffer> <ESC> <Plug>(unite_exit)
endfunction

"----------------------------------------
" vim-filer.vim
let s:bundle = neobundle#get('vimfiler')
function! s:bundle.hooks.on_source(bundle)
	autocmd FileType vimfiler call s:vimfiler_my_settings()
	function! s:vimfiler_my_settings()
		nmap <silent><buffer> <Space><Space> <Plug>(vimfiler_toggle_mark_current_line)k
		" ESCキーを押すと終了する
		nmap <silent><buffer> <C-[> q
		nmap <buffer><expr> l vimfiler#smart_cursor_map( "\<Plug>(vimfiler_smart_l)", "\<Plug>(vimfiler_edit_file)")
	endfunction
	" vimfilerをデフォルトのファイラにする
	let g:vimfiler_as_default_explorer = 1
	" セーフモード無効化
	let g:vimfiler_safe_mode_by_default = 0
	" ファイル数が多い場合、これがないと/検索でヒットしない
	let g:vimfiler_draw_files_limit=1000
endfunction
nnoremap <silent> <Space>e  :VimFilerBufferDir<CR>


" tab-----------------------
" " Anywhere SID.
function! s:SID_PREFIX()
	return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
	let s = ''
	for i in range(1, tabpagenr('$'))
		let bufnrs = tabpagebuflist(i)
		let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
		let no = i  " display 0-origin tabpagenr.
		let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
		let title = fnamemodify(bufname(bufnr), ':t')
		let title = '[' . title . ']'
		let s .= '%'.i.'T'
		let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
		let s .= no . ':' . title
		let s .= mod
		let s .= '%#TabLineFill# '
	endfor
	let s .= '%#TabLineFill#%T%=%#TabLine#'
	return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
	execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ

" js
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers=['jsxhint']

"
" vimdiffの色設定
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=22
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
highlight DiffText   cterm=bold ctermfg=10 ctermbg=21

" jq
command! -nargs=? Jq call s:Jq(<f-args>)
function! s:Jq(...)
	if 0 == a:0
		let l:arg = "."
	else
		let l:arg = a:1
	endif
	"execute "%! jq 95fe1a73-e2e2-4737-bea1-a44257c50fc8quot;" . l:arg . "95fe1a73-e2e2-4737-bea1-a44257c50fc8quot;"
	execute "%! jq " . l:arg . ""
endfunction

